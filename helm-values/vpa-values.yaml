# Default values for vertical-pod-autoscaler.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# imagePullSecrets -- A list of image pull secrets to be used for all pods
imagePullSecrets: []
# priorityClassName -- To set the priorityclass for all pods
priorityClassName: ""
# nameOverride -- A template override for the name
nameOverride: ""
# fullnameOverride -- A template override for the fullname
fullnameOverride: ""
# podLabels -- Labels to add to all pods
podLabels: {}
rbac:
  # rbac.create -- If true, then rbac resources (ClusterRoles and ClusterRoleBindings) will be created for the selected components.
  # Temporary rbac resources will still be created, to ensure a functioning installation process
  create: true
  # rbac.extraRules -- Extra rbac rules for ClusterRoles
  extraRules:
    # rbac.extraRules.vpaActor -- Extra rbac rules for the vpa-actor ClusterRole
    vpaActor: []
    # -- Extra rbac rules for the vpa-status-actor ClusterRole
    vpaStatusActor: []
    # rbac.extraRules.vpaCheckpointActor -- Extra rbac rules for the vpa-checkpoint-actor ClusterRole
    vpaCheckpointActor: []
    # rbac.extraRules.vpaEvictioner -- Extra rbac rules for the vpa-evictioner ClusterRole
    vpaEvictioner: []
    # rbac.extraRules.vpaMetricsReader -- Extra rbac rules for the vpa-metrics-reader ClusterRole
    vpaMetricsReader: []
    # rbac.extraRules.vpaTargetReader -- Extra rbac rules for the vpa-target-reader ClusterRole
    vpaTargetReader: []
    # rbac.extraRules.vpaStatusReader -- Extra rbac rules for the vpa-status-reader ClusterRole
    vpaStatusReader: []

serviceAccount:
  # serviceAccount.create -- Specifies whether a service account should be created for each component
  create: true
  # serviceAccount.annotations -- Annotations to add to the service accounts for each component
  annotations: {}
  # serviceAccount.name -- The base name of the service account to use (appended with the component). If not set and create is true, a name is generated using the fullname template and appended for each component
  name: ""
  # serviceAccount.automountServiceAccountToken -- Automount API credentials for the Service Account
  automountServiceAccountToken: true

recommender:
  # recommender.enabled -- If true, the vpa recommender component will be installed.
  enabled: true
  # -- Specify a secret to get environment variables from
  envFromSecret: ""
  # recommender.annotations -- Annotations to add to the recommender deployment
  annotations: {}
  # recommender.extraArgs -- A set of key-value flags to be passed to the recommender
  extraArgs:
    v: "4"
    pod-recommendation-min-cpu-millicores: 15
    pod-recommendation-min-memory-mb: 100
    storage: prometheus
    prometheus-address: http://prometheus-server.monitoring.svc.cluster.local:80
  replicaCount: 1
  # recommender.revisionHistoryLimit -- The number of old replicasets to retain, default is 10, 0 will garbage-collect old replicasets
  revisionHistoryLimit: 10
  # recommender.podDisruptionBudget -- This is the setting for the pod disruption budget
  podDisruptionBudget: {}
    # maxUnavailable: 1
  image:
    # recommender.image.repository -- The location of the recommender image
    repository: registry.k8s.io/autoscaling/vpa-recommender
    # recommender.image.tag -- Overrides the image tag whose default is the chart appVersion
    tag: "1.1.2"
    # recommender.image.pullPolicy -- The pull policy for the recommender image. Recommend not changing this
    pullPolicy: Always
  # recommender.podAnnotations -- Annotations to add to the recommender pod
  podAnnotations: {}
  # recommender.podLabels -- Labels to add to the recommender pod
  podLabels: {}
  # recommender.podSecurityContext -- The security context for the recommender pod
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault
  # recommender.securityContext -- The security context for the containers inside the recommender pod
  securityContext:
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  # recommender.livenessProbe -- The liveness probe definition inside the recommender pod
  livenessProbe:
    failureThreshold: 6
    httpGet:
      path: /health-check
      port: metrics
      scheme: HTTP
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3
  # recommender.readinessProbe -- The readiness probe definition inside the recommender pod
  readinessProbe:
    failureThreshold: 120
    httpGet:
      path: /health-check
      port: metrics
      scheme: HTTP
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3
  # recommender.resources -- The resources block for the recommender pod
  resources:
    limits: {}
      # cpu: 200m
      # memory: 1000Mi
    requests:
      cpu: 50m
      memory: 500Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # -- Enables a prometheus operator podMonitor for the recommender
  podMonitor:
    enabled: false
    annotations: {}
    labels: {}

updater:
  # updater.enabled -- If true, the updater component will be deployed
  enabled: false
  
admissionController:
  # admissionController.enabled -- If true, will install the admission-controller component of vpa
  enabled: false

tests:
  # tests.securityContext -- The security context for the containers run as helm hook tests
  securityContext:
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 10324
    capabilities:
      drop:
        - ALL
  image:
    # tests.image.repository -- An image used for testing containing bash, cat and kubectl
    repository: bitnami/kubectl
    # tests.image.tag -- An image tag for the tests image
    tag: ""
    # tests.image.pullPolicy -- The pull policy for the tests image.
    pullPolicy: Always